{"version":3,"sources":["helpers/fetch2.js","redux/reducers/authReducer.js","components/Auth.js","redux/reducers/todoReducer.js","components/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2","api","body","a","fetch","method","headers","Authorization","localStorage","getItem","JSON","stringify","res","json","fetch3","type","signupUser","createAsyncThunk","result","signinUser","authReducer","createSlice","name","initialState","token","loading","error","reducers","addToken","state","logout","action","removeItem","extraReducers","fulfilled","payload","message","pending","setItem","actions","Auth","useState","email","setEmail","password","setPassword","auth","setAuth","dispatch","useDispatch","useSelector","user","className","value","onChange","e","target","onClick","createTodo","fetchTodo","deleteTodo","id","todoReducer","push","filter","item","_id","Todo","mytodo","setMyTodo","todos","useEffect","placeholder","todo","map","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.889c5204.chunk.js","sourcesContent":["export const fetch2 = async (api, body, token = \"\") => {\n  const res = await fetch(api, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\"),\n    },\n    body: JSON.stringify(body),\n  });\n  return await res.json();\n};\n\nexport const fetch3 = async (api, type) => {\n  const res = await fetch(api, {\n    method: type,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"token\"),\n    },\n  });\n  return await res.json();\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetch2 } from \"../../helpers/fetch2\";\n\nconst initialState = {\n  token: \"\",\n  loading: false,\n  error: \"\",\n};\n\nexport const signupUser = createAsyncThunk(\"signupuser\", async body => {\n  const result = await fetch2(\"/signup\", body);\n  return result;\n});\n\nexport const signinUser = createAsyncThunk(\"signinuser\", async body => {\n  const result = await fetch2(\"/signin\", body);\n  return result;\n});\n\nconst authReducer = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    addToken: (state, token) => {\n      state.token = localStorage.getItem(\"token\");\n    },\n    logout: (state, action) => {\n      state.token = null;\n      localStorage.removeItem(\"token\");\n    },\n  },\n  extraReducers: {\n    [signupUser.fulfilled]: (state, { payload: { error, message } }) => {\n      state.loading = false;\n      if (error) {\n        state.error = error;\n      } else {\n        state.error = message;\n      }\n    },\n    [signupUser.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [signinUser.fulfilled]: (state, { payload: { error, token } }) => {\n      state.loading = false;\n      if (error) {\n        state.error = error;\n      } else {\n        state.token = token;\n        localStorage.setItem(\"token\", token);\n      }\n    },\n    [signinUser.pending]: (state, action) => {\n      state.loading = true;\n    },\n  },\n});\n\nexport const { addToken, logout } = authReducer.actions;\nexport default authReducer.reducer;\n","import React, { useState } from \"react\";\nimport { signupUser, signinUser } from \"../redux/reducers/authReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst Auth = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [auth, setAuth] = useState(\"signin\");\n\n  const dispatch = useDispatch();\n  const { loading, error } = useSelector(state => {\n    return state.user;\n  });\n\n  const authenicate = () => {\n    if (auth === \"signin\") {\n      dispatch(signinUser({ email, password }));\n    } else {\n      dispatch(signupUser({ email, password }));\n    }\n  };\n\n  return (\n    <div>\n      {loading && (\n        <div className=\"progress\">\n          <div className=\"indeterminate\"></div>\n        </div>\n      )}\n      <h1>Please {auth}!</h1>\n      {error && <h5>{error}</h5>}\n      <input\n        type=\"email\"\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n      {auth === \"signin\" ? (\n        <h6 onClick={() => setAuth(\"signup\")}>Don't have an account ?</h6>\n      ) : (\n        <h6 onClick={() => setAuth(\"signin\")}>Already have an account?</h6>\n      )}\n      <button\n        className=\"btn #ff4081 pink accent-2\"\n        onClick={() => authenicate()}\n      >\n        {auth}\n      </button>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetch2, fetch3 } from \"../../helpers/fetch2\";\n\nconst initialState = [];\n\nexport const createTodo = createAsyncThunk(\"createtodo\", async body => {\n  const result = await fetch2(\"/createtodo\", body);\n  return result;\n});\n\nexport const fetchTodo = createAsyncThunk(\"fetchtodos\", async () => {\n  const result = await fetch3(\"/gettodos\", \"get\");\n  return result;\n});\n\nexport const deleteTodo = createAsyncThunk(\"deletetodos\", async id => {\n  const result = await fetch3(`/remove/${id}`, \"delete\");\n  return result;\n});\n\nconst todoReducer = createSlice({\n  name: \"todo\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [createTodo.fulfilled]: (state, { payload: { message } }) => {\n      if (message) state.push(message);\n    },\n\n    [fetchTodo.fulfilled]: (state, { payload: { message } }) => {\n      return message;\n    },\n\n    [deleteTodo.fulfilled]: (state, { payload: { message } }) => {\n      const removedTodo = state.filter(item => {\n        return item._id !== message._id;\n      });\n      return removedTodo;\n    },\n  },\n});\n\nexport default todoReducer.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  createTodo,\n  fetchTodo,\n  deleteTodo,\n} from \"../redux/reducers/todoReducer\";\nimport { logout } from \"../redux/reducers/authReducer\";\n\nconst Todo = () => {\n  const [mytodo, setMyTodo] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const todos = useSelector(state => state.todos);\n\n  useEffect(() => {\n    dispatch(fetchTodo());\n  }, []);\n\n  const addTodo = () => {\n    dispatch(createTodo({ todo: mytodo }));\n  };\n  return (\n    <div>\n      <input\n        placeholder=\"Write your Todo\"\n        type=\"text\"\n        value={mytodo}\n        onChange={e => setMyTodo(e.target.value)}\n      />\n      <button className=\"btn #ff4081 pink accent-2\" onClick={() => addTodo()}>\n        Add Todo\n      </button>\n      <ul className=\"collection\">\n        {todos.map(item => {\n          return (\n            <li\n              className=\"collection-item\"\n              key={item._id}\n              onClick={() => dispatch(deleteTodo(item._id))}\n            >\n              {item.todo}\n            </li>\n          );\n        })}\n      </ul>\n\n      <button\n        className=\"btn #ff4081 pink accent-2\"\n        onClick={() => dispatch(logout())}\n      >\n        Log Out\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Auth from \"./components/Auth\";\nimport Todo from \"./components/Todo\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addToken } from \"./redux/reducers/authReducer\";\n\nfunction App() {\n  const token = useSelector(state => {\n    return state.user.token;\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(addToken());\n  }, []);\n\n  return <div className=\"App\">{token ? <Todo /> : <Auth />}</div>;\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport authReducer from \"../redux/reducers/authReducer\";\nimport todoReducer from \"../redux/reducers/todoReducer\";\n\nexport const store = configureStore({\n  reducer: {\n    user: authReducer,\n    todos: todoReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}